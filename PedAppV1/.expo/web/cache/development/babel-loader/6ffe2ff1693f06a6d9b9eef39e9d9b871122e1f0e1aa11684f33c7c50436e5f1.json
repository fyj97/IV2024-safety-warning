{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Paho from \"paho-mqtt\";\nimport { useState, useEffect } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Svg, Circle, Line } from 'react-native-svg';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar client;\nvar ped_id = parseInt(Math.random() * 100);\nvar coords_interval_ms = 1000;\nvar receivetopic = \"ngi/1/detection/fromserver/\" + ped_id;\nvar sendtopic = \"ngi/1/detection/toserver\";\nvar temp_coords_x = 0;\nvar temp_coords_y = 0;\nvar vibration_pattern = {\n  'android': [0, 500, 250, 250, 250],\n  'ios': [0, 250]\n};\nvar alive_chart = {\n  true: {\n    text: \"So far so good\",\n    color: \"#47c906\"\n  },\n  false: {\n    text: \"DANGER DANGER COLLISION INCOMING\",\n    color: \"#c90606\"\n  }\n};\nvar randomNumber = function randomNumber() {\n  var generateRandomColor = Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');\n  return '#000000';\n};\nvar ScatterPlot = function ScatterPlot(props) {\n  var width = Math.min(props.width, props.height);\n  var height = Math.min(props.width, props.height);\n  var gridSize = width / 10;\n  var scale = width / 1000;\n  console.log(props.data);\n  var colors = [];\n  props.data.forEach(function (_, ind) {\n    colors.push(randomNumber());\n  });\n  return _jsxs(Svg, {\n    style: styles.graph,\n    children: [Array.from(Array(11)).map(function (_, index) {\n      return _jsx(Line, {\n        x1: index * gridSize,\n        y1: 0,\n        x2: index * gridSize,\n        y2: height,\n        stroke: \"gray\",\n        strokeWidth: \"0.25\"\n      }, \"vertical-\" + index);\n    }), Array.from(Array(11)).map(function (_, index) {\n      return _jsx(Line, {\n        x1: 0,\n        y1: index * gridSize,\n        x2: width,\n        y2: index * gridSize,\n        stroke: \"gray\",\n        strokeWidth: \"0.25\"\n      }, \"horizontal-\" + index);\n    }), props.data.map(function (vehicle, dataindex) {\n      return vehicle.map(function (point, index) {\n        return _jsx(Circle, {\n          cx: point.x * scale,\n          cy: point.y * scale,\n          r: 3,\n          fill: colors[dataindex]\n        }, index);\n      });\n    })]\n  });\n};\nexport default function App() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    good = _useState2[0],\n    setalive = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    coordsx = _useState4[0],\n    updateCoordsX = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    coordsy = _useState6[0],\n    updateCoordsY = _useState6[1];\n  var _useState7 = useState(Dimensions.get(\"window\").height),\n    _useState8 = _slicedToArray(_useState7, 2),\n    graphWidth = _useState8[0],\n    changeGraphWidth = _useState8[1];\n  var _useState9 = useState(Dimensions.get(\"window\").height),\n    _useState10 = _slicedToArray(_useState9, 2),\n    graphHeight = _useState10[0],\n    changeGraphHeight = _useState10[1];\n  var vehicleData = [[{\n    \"x\": 10,\n    \"y\": 30\n  }, {\n    \"x\": 30,\n    \"y\": 60\n  }, {\n    \"x\": 50,\n    \"y\": 90\n  }, {\n    \"x\": 70,\n    \"y\": 120\n  }, {\n    \"x\": 90,\n    \"y\": 150\n  }], [{\n    \"x\": 10,\n    \"y\": 150\n  }, {\n    \"x\": 30,\n    \"y\": 120\n  }, {\n    \"x\": 50,\n    \"y\": 90\n  }, {\n    \"x\": 70,\n    \"y\": 60\n  }, {\n    \"x\": 90,\n    \"y\": 30\n  }]];\n  function receive(msg) {\n    if (msg.destinationName === receivetopic) {\n      var msgg = msg.payloadString.split(\" \");\n      var message = \"\";\n      try {\n        message = JSON.parse(msg.payloadString);\n      } catch (error) {\n        console.error('Error parsing JSON:', error);\n      }\n      console.log(message);\n      if (message['status'] === \"bad\") {\n        Vibration.vibrate(vibration_pattern[Platform.OS], true);\n        console.log(\"BAD\");\n        setalive(false);\n      } else if (message['status'] === \"good\") {\n        Vibration.cancel();\n        console.log(\"GOOD\");\n        setalive(true);\n      } else if (message['status'] === 'info') {\n        vehicleData.push([message['ped']['future']['x'], message['ped']['future']['y']]);\n        vehicleData.push([message['veh']['future']['x'], message['veh']['future']['y']]);\n      }\n      console.log(message);\n    }\n  }\n  useEffect(function () {\n    client = new Paho.Client(\"broker.mqttdashboard.com\", Number(8000), \"python-mqtt-\" + ped_id);\n    client.connect({\n      onSuccess: function onSuccess() {\n        console.log(\"Connected!\");\n        client.subscribe(receivetopic);\n        client.onMessageArrived = receive;\n      },\n      onFailure: function onFailure() {\n        console.log(\"Failed to connect!\");\n      }\n    });\n    var interval = setInterval(function () {\n      var curtime = Date.now() / 1000;\n      send_coords(client, temp_coords_x, temp_coords_y, curtime);\n      temp_coords_x += 0.43;\n      temp_coords_y -= 0.04;\n      temp_coords_x = Math.round(temp_coords_x * 100) / 100;\n      temp_coords_y = Math.round(temp_coords_y * 100) / 100;\n      updateCoordsX(temp_coords_x);\n      updateCoordsY(temp_coords_y);\n    }, coords_interval_ms);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  function send_coords(c, coordsx, coordsy, time) {\n    var message = new Paho.Message((ped_id + \",\" + coordsx + \",\" + coordsy + ',' + time).toString());\n    message.destinationName = sendtopic;\n    c.send(message);\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: {\n        height: '40%',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsx(Text, {\n        style: {\n          color: alive_chart[good]['color'],\n          fontSize: 50\n        },\n        children: alive_chart[good]['text']\n      })\n    }), _jsxs(View, {\n      style: {\n        height: '50%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#ffffaa'\n      },\n      onLayout: function onLayout(event) {\n        var _event$nativeEvent$la = event.nativeEvent.layout,\n          x = _event$nativeEvent$la.x,\n          y = _event$nativeEvent$la.y,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height;\n        console.log(x);\n        console.log(y);\n        changeGraphHeight(height);\n        changeGraphWidth(width);\n      },\n      children: [_jsx(ScatterPlot, {\n        gridSize: 10,\n        data: vehicleData,\n        width: graphWidth,\n        height: graphHeight\n      }), _jsx(Text, {\n        children: \"Real Time Graph of Trajectories\"\n      })]\n    }), _jsx(View, {\n      style: {\n        height: '10%',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsxs(Text, {\n        children: [\"Your Coords: (\", coordsx, \", \", coordsy, \")\"]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  graph: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["Paho","useState","useEffect","StatusBar","StyleSheet","Text","Button","View","Vibration","Platform","Dimensions","Svg","Circle","Line","jsx","_jsx","jsxs","_jsxs","client","ped_id","parseInt","Math","random","coords_interval_ms","receivetopic","sendtopic","temp_coords_x","temp_coords_y","vibration_pattern","alive_chart","true","text","color","false","randomNumber","generateRandomColor","floor","toString","padStart","ScatterPlot","props","width","min","height","gridSize","scale","console","log","data","colors","forEach","_","ind","push","style","styles","graph","children","Array","from","map","index","x1","y1","x2","y2","stroke","strokeWidth","vehicle","dataindex","point","cx","x","cy","y","r","fill","App","_useState","_useState2","_slicedToArray","good","setalive","_useState3","_useState4","coordsx","updateCoordsX","_useState5","_useState6","coordsy","updateCoordsY","_useState7","get","_useState8","graphWidth","changeGraphWidth","_useState9","_useState10","graphHeight","changeGraphHeight","vehicleData","receive","msg","destinationName","msgg","payloadString","split","message","JSON","parse","error","vibrate","OS","cancel","Client","Number","connect","onSuccess","subscribe","onMessageArrived","onFailure","interval","setInterval","curtime","Date","now","send_coords","round","clearInterval","c","time","Message","send","container","alignItems","justifyContent","fontSize","backgroundColor","onLayout","event","_event$nativeEvent$la","nativeEvent","layout","create","flex"],"sources":["/Users/markivanantha/Documents/Columbia Project/App/PedApp/App.js"],"sourcesContent":["// Vikram Anantha\n// Columbia Summer Internship 2023\n// Mentored under Prof Sharon Di, Yongjie Fu\n\n// This is Version 1 of the Pedestrian App\n\nimport Paho from \"paho-mqtt\";\n\nimport { useState, useEffect } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, Button, View, Vibration, Platform, Dimensions } from 'react-native';\nimport { Svg, Circle, Line } from 'react-native-svg';\n\nvar client\nvar ped_id = parseInt(Math.random() * 100);\nconst coords_interval_ms = 1000\nconst receivetopic = \"ngi/1/detection/fromserver/\" + ped_id\nconst sendtopic = \"ngi/1/detection/toserver\"\nvar temp_coords_x = 0\nvar temp_coords_y = 0\nconst vibration_pattern = {\n  'android': [\n    0, 500, 250, 250, 250 // wait 0s, vibrate .5s, wait .25s, vibrate .25s, wait .25s\n  ],\n  'ios': [\n    0, 250 // wait 0s, vibrate, wait .25s\n  ]\n}\nconst alive_chart = {\n  true: {\n    text: \"So far so good\",\n    color: \"#47c906\"\n  },\n  false: {\n    text: \"DANGER DANGER COLLISION INCOMING\",\n    color: \"#c90606\"\n  }\n}\n\nconst randomNumber = () => {\n  const generateRandomColor = Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, '0');\n  // return `#${generateRandomColor}`;\n  return '#000000'\n}\n\nconst ScatterPlot = props => {\n\n  const width = Math.min(props.width, props.height)\n  const height = Math.min(props.width, props.height)\n  const gridSize = width / 10;\n  const scale = width / 1000;\n  console.log(props.data)\n  // console.log(height)\n  var colors = []\n  props.data.forEach((_, ind) => {\n    colors.push(randomNumber())\n  })\n  return (\n      <Svg style={styles.graph}>\n\n\n        {Array.from(Array(11)).map((_, index) => (\n          <Line\n            key={`vertical-${index}`}\n            x1={index * gridSize}\n            y1={0}\n            x2={index * gridSize}\n            y2={height} // Adjust this based on your desired graph height\n            stroke=\"gray\"\n            strokeWidth=\"0.25\"\n          />\n        ))}\n\n\n        {Array.from(Array(11)).map((_, index) => (\n          <Line\n            key={`horizontal-${index}`}\n            x1={0}\n            y1={index * gridSize}\n            x2={width} // Adjust this based on your desired graph width\n            y2={index * gridSize}\n            stroke=\"gray\"\n            strokeWidth=\"0.25\"\n          />\n        ))}\n\n\n        {props.data.map((vehicle, dataindex) => (\n          vehicle.map((point, index) => (\n            <Circle\n            key={index}\n            cx={(point.x * scale)}\n            cy={(point.y * scale)}\n            r={3}\n            fill={colors[dataindex]}\n          />\n          ))\n          \n        ))}\n      </Svg>\n  );\n}\n\n\nexport default function App() {\n\n  const [good, setalive] = useState(true);\n  const [coordsx, updateCoordsX] = useState(0)\n  const [coordsy, updateCoordsY] = useState(0)\n\n  const [graphWidth, changeGraphWidth] = useState(Dimensions.get(\"window\").height)\n  const [graphHeight, changeGraphHeight] = useState(Dimensions.get(\"window\").height)\n  // console.log(graphWidth)\n  // var vehicleData = [\n  //   [\n  //     [1.7195102120310024, 2.1513111973677757, 2.585986039121108, 3.024218530054881, 3.466481582793524],\n  //     [-0.1599544366648645, -0.20012197278181404, -0.24055685342878297, -0.2813226937409655, -0.32246349345971936]\n  //   ]\n  // ];\n  var vehicleData = [\n    [\n      {\"x\": 10, \"y\": 30},\n      {\"x\": 30, \"y\": 60},\n      {\"x\": 50, \"y\": 90},\n      {\"x\": 70, \"y\": 120},\n      {\"x\": 90, \"y\": 150},\n    ],\n    [\n      {\"x\": 10, \"y\": 150},\n      {\"x\": 30, \"y\": 120},\n      {\"x\": 50, \"y\": 90},\n      {\"x\": 70, \"y\": 60},\n      {\"x\": 90, \"y\": 30},\n    ]\n  ]\n  // console.log(receivetopic)\n  function receive(msg) { \n    if (msg.destinationName === receivetopic) {\n    var msgg = msg.payloadString.split(\" \")\n    // console.log(msgg)\n    var message = \"\";\n    try {\n      // Parse the JSON string into a JavaScript object\n      message = JSON.parse(msg.payloadString);\n    } catch (error) {\n      console.error('Error parsing JSON:', error);\n    }\n    console.log(message)\n    // var message = {\n    //   \"status\": msgg[0],\n    //   \"ttc\": \"\",\n    //   \"ttc_id\": \"\",\n    //   \"veh\": {\n    //     \"future\": {\"x\": [], \"y\": []},\n    //   },\n    //   \"ped\": {\n    //     \"future\": {\"x\": [], \"y\": []},\n    //   },\n    // }\n    // // console.log(message)\n    // if (message[\"status\"] == 'bad') {\n    //   message[\"ttc\"] = msgg[1]\n    //   message[\"ttc_id\"] = msgg[2]\n    // } else if (message[\"status\"] == 'info') {\n    // //   o1 = \"\"\n    // //   o3 = \"\"\n    // //   for (let i = 1; i < msgg.length; i++) {\n    // //     if (msgg[i] === \"veh\" || msgg[i] === \"ped\") {\n    // //       o1 = msgg[i]\n    // //     }\n    // //     else if (msgg[i] === \"x\" || msgg[i] === \"y\") {\n    // //       o3 = msgg[i]\n    // //     }\n    // //     else {\n    // //       message[o1]['future'][o3].push(parseFloat(msgg[i]))\n    // //     }\n    // //   }\n    // }\n    // // console.log(message)\n    // // vehicleData = \n    if (message['status'] === \"bad\") {\n      Vibration.vibrate(vibration_pattern[Platform.OS], true)      \n      console.log(\"BAD\")\n      setalive(false)\n    }\n    else if (message['status'] === \"good\") {\n      Vibration.cancel()\n      console.log(\"GOOD\")\n      setalive(true)\n    }\n    else if (message['status'] === 'info') {\n      vehicleData.push([message['ped']['future']['x'], message['ped']['future']['y']])\n      vehicleData.push([message['veh']['future']['x'], message['veh']['future']['y']])\n    }\n    console.log(message)\n  }}\n\n  useEffect(() => {\n    client = new Paho.Client(\n      \"broker.mqttdashboard.com\",\n      Number(8000),\n      `python-mqtt-${ped_id}`\n    );\n    client.connect( \n      {\n        onSuccess: () => { \n        console.log(\"Connected!\");\n        client.subscribe(receivetopic);\n        client.onMessageArrived = receive;\n      },\n      onFailure: () => {\n        console.log(\"Failed to connect!\"); \n      }\n      }\n    );\n    const interval = setInterval(() => {\n      // console.log(temp_coords_x + \",\" + temp_coords_y) //asdf\n      var curtime = Date.now()/1000\n      // console.log(curtime + \", \" + temp_coords_x)\n      send_coords(client, temp_coords_x, temp_coords_y, curtime)\n      // updateCoords({'x': coords.x+1, 'y': coords.y-0.4})\n      temp_coords_x += 0.43\n      temp_coords_y -= 0.04\n      temp_coords_x = Math.round(temp_coords_x*100)/100\n      temp_coords_y = Math.round(temp_coords_y*100)/100\n      updateCoordsX(temp_coords_x)\n      updateCoordsY(temp_coords_y)\n      // \n    }, coords_interval_ms);\n    return () => clearInterval(interval);\n  }, [])\n\n  function send_coords(c, coordsx, coordsy, time) {\n    const message = new Paho.Message((ped_id + \",\" + coordsx + \",\" + coordsy + ',' + time).toString());\n    message.destinationName = sendtopic;\n\n    c.send(message);\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={{height: '40%', alignItems: 'center', justifyContent: 'center',}}>\n        <Text style={{color: alive_chart[good]['color'], fontSize: 50}}>\n          {alive_chart[good]['text']}\n        </Text>\n      </View>\n      <View style={{height: '50%', alignItems: 'center', justifyContent: 'center', backgroundColor: '#ffffaa'}} onLayout={(event) => {\n      var {x, y, width, height} = event.nativeEvent.layout;\n      console.log(x)\n      console.log(y)\n      changeGraphHeight(height)\n      changeGraphWidth(width)}}>\n        <ScatterPlot \n          gridSize={10}\n          data={vehicleData}\n          width={graphWidth}\n          height={graphHeight}\n        />\n        <Text>Real Time Graph of Trajectories</Text>\n      </View>\n      <View style={{height: '10%', alignItems: 'center', justifyContent: 'center',}}>\n        <Text>\n          Your Coords: ({coordsx}, {coordsy})\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  graph: {\n    flex: 1,\n  },\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}