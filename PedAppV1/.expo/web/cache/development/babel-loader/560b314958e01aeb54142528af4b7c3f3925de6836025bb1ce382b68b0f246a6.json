{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Paho from \"paho-mqtt\";\nimport { useState, useEffect } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Svg, Circle, Line, Polygon } from 'react-native-svg';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar client;\nvar ped_id = parseInt(Math.random() * 100);\nvar coords_interval_ms = 1000;\nvar receivetopic = \"ngi/1/detection/fromserver/\" + ped_id;\nvar sendtopic = \"ngi/1/detection/toserver\";\nvar temp_coords_x = 0;\nvar temp_coords_y = 0;\nvar vibration_pattern = {\n  'android': [0, 500, 250, 250, 250],\n  'ios': [0, 250]\n};\nvar alive_chart = {\n  true: {\n    text: \"So far so good\",\n    color: \"#47c906\"\n  },\n  false: {\n    text: \"DANGER DANGER COLLISION INCOMING\",\n    color: \"#c90606\"\n  }\n};\nvar randomNumber = function randomNumber() {\n  var generateRandomColor = Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');\n  return \"#\" + generateRandomColor;\n};\nvar ScatterPlot = function ScatterPlot(props) {\n  var width = props.width;\n  var height = props.height;\n  var gridSize = width / 10;\n  var scale = width / 1000;\n  return _jsx(Svg, {\n    style: styles.graph,\n    children: _jsx(Polygon, {\n      points: \"215,225, 225,215, 228,228\",\n      fill: \"green\"\n    })\n  });\n};\nexport default function App() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    good = _useState2[0],\n    setalive = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    coordsx = _useState4[0],\n    updateCoordsX = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    coordsy = _useState6[0],\n    updateCoordsY = _useState6[1];\n  var _useState7 = useState(Dimensions.get(\"window\").height),\n    _useState8 = _slicedToArray(_useState7, 2),\n    graphWidth = _useState8[0],\n    changeGraphWidth = _useState8[1];\n  var _useState9 = useState(Dimensions.get(\"window\").height),\n    _useState10 = _slicedToArray(_useState9, 2),\n    graphHeight = _useState10[0],\n    changeGraphHeight = _useState10[1];\n  var vehicleData = [];\n  function receive(msg) {\n    console.log(msg);\n    if (msg.destinationName === receivetopic) {\n      message = JSON.parse(msg.payloadString);\n      if (message['status'] === \"bad\") {\n        Vibration.vibrate(vibration_pattern[Platform.OS], true);\n        console.log(\"BAD\");\n        setalive(false);\n      } else if (message['status'] === \"good\") {\n        Vibration.cancel();\n        console.log(\"GOOD\");\n        setalive(true);\n      } else if (message['status'] === 'info') {\n        vehicleData.push([message['ped']['future']['x'], message['ped']['future']['y']]);\n        vehicleData.push([message['veh']['future']['x'], message['veh']['future']['y']]);\n      }\n    }\n  }\n  useEffect(function () {\n    client = new Paho.Client(\"broker.mqttdashboard.com\", Number(8000), \"python-mqtt-\" + ped_id);\n    client.connect({\n      onSuccess: function onSuccess() {\n        console.log(\"Connected!\");\n        client.subscribe(receivetopic);\n        client.onMessageArrived = receive;\n      },\n      onFailure: function onFailure() {\n        console.log(\"Failed to connect!\");\n      }\n    });\n    var interval = setInterval(function () {\n      var curtime = Date.now() / 1000;\n      send_coords(client, temp_coords_x, temp_coords_y, curtime);\n      temp_coords_x += 0.43;\n      temp_coords_y -= 0.04;\n      temp_coords_x = Math.round(temp_coords_x * 100) / 100;\n      temp_coords_y = Math.round(temp_coords_y * 100) / 100;\n      updateCoordsX(temp_coords_x);\n      updateCoordsY(temp_coords_y);\n    }, coords_interval_ms);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  function send_coords(c, coordsx, coordsy, time) {\n    var message = new Paho.Message((ped_id + \",\" + coordsx + \",\" + coordsy + ',' + time).toString());\n    message.destinationName = sendtopic;\n    c.send(message);\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: {\n        flex: 4,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsx(Text, {\n        style: {\n          color: alive_chart[good]['color'],\n          fontSize: 50\n        },\n        children: alive_chart[good]['text']\n      })\n    }), _jsx(View, {\n      style: {\n        flex: 5,\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'blue'\n      },\n      onLayout: function onLayout(event) {\n        var _event$nativeEvent$la = event.nativeEvent.layout,\n          x = _event$nativeEvent$la.x,\n          y = _event$nativeEvent$la.y,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height;\n        console.log(x);\n        console.log(y);\n        changeGraphHeight(y);\n        changeGraphWidth(x);\n      }\n    }), _jsx(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsxs(Text, {\n        children: [\"Your Coords: (\", coordsx, \", \", coordsy, \")\"]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["Paho","useState","useEffect","StatusBar","StyleSheet","Text","Button","View","Vibration","Platform","Dimensions","Svg","Circle","Line","Polygon","jsx","_jsx","jsxs","_jsxs","client","ped_id","parseInt","Math","random","coords_interval_ms","receivetopic","sendtopic","temp_coords_x","temp_coords_y","vibration_pattern","alive_chart","true","text","color","false","randomNumber","generateRandomColor","floor","toString","padStart","ScatterPlot","props","width","height","gridSize","scale","style","styles","graph","children","points","fill","App","_useState","_useState2","_slicedToArray","good","setalive","_useState3","_useState4","coordsx","updateCoordsX","_useState5","_useState6","coordsy","updateCoordsY","_useState7","get","_useState8","graphWidth","changeGraphWidth","_useState9","_useState10","graphHeight","changeGraphHeight","vehicleData","receive","msg","console","log","destinationName","message","JSON","parse","payloadString","vibrate","OS","cancel","push","Client","Number","connect","onSuccess","subscribe","onMessageArrived","onFailure","interval","setInterval","curtime","Date","now","send_coords","round","clearInterval","c","time","Message","send","container","flex","alignItems","justifyContent","fontSize","backgroundColor","onLayout","event","_event$nativeEvent$la","nativeEvent","layout","x","y","create"],"sources":["/Users/markivanantha/Documents/Columbia Project/App/PedApp/App.js"],"sourcesContent":["// Vikram Anantha\n// Columbia Summer Internship 2023\n// Mentored under Prof Sharon Di, Yongjie Fu\n\n// This is Version 1 of the Pedestrian App\n\nimport Paho from \"paho-mqtt\";\n\nimport { useState, useEffect } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, Button, View, Vibration, Platform, Dimensions } from 'react-native';\nimport { Svg, Circle, Line, Polygon } from 'react-native-svg';\n\nvar client\nvar ped_id = parseInt(Math.random() * 100);\nconst coords_interval_ms = 1000\nconst receivetopic = \"ngi/1/detection/fromserver/\" + ped_id\nconst sendtopic = \"ngi/1/detection/toserver\"\nvar temp_coords_x = 0\nvar temp_coords_y = 0\nconst vibration_pattern = {\n  'android': [\n    0, 500, 250, 250, 250 // wait 0s, vibrate .5s, wait .25s, vibrate .25s, wait .25s\n  ],\n  'ios': [\n    0, 250 // wait 0s, vibrate, wait .25s\n  ]\n}\nconst alive_chart = {\n  true: {\n    text: \"So far so good\",\n    color: \"#47c906\"\n  },\n  false: {\n    text: \"DANGER DANGER COLLISION INCOMING\",\n    color: \"#c90606\"\n  }\n}\n\nconst randomNumber = () => {\n  const generateRandomColor = Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, '0');\n  return `#${generateRandomColor}`;\n  // return '#000000'\n}\n\nconst ScatterPlot = props => {\n\n  const width = props.width\n  const height = props.height\n  const gridSize = width / 10;\n  const scale = width / 1000;\n  // console.log(width)\n  // console.log(height)\n  // var colors = []\n  // props.data.forEach((_, ind) => {\n  //   colors.push(randomNumber())\n  // })\n  return (\n      <Svg style={styles.graph}>\n      <Polygon\n        points=\"215,225, 225,215, 228,228\"\n        fill=\"green\"\n       \n      />\n\n        {/* {Array.from(Array(10)).map((_, index) => (\n          <Line\n            key={`vertical-${index}`}\n            x1={index * gridSize}\n            y1={0}\n            x2={index * gridSize}\n            y2={height} // Adjust this based on your desired graph height\n            stroke=\"gray\"\n            strokeWidth=\"0.25\"\n          />\n        ))}\n\n\n        {Array.from(Array(11)).map((_, index) => (\n          <Line\n            key={`horizontal-${index}`}\n            x1={0}\n            y1={index * gridSize}\n            x2={width} // Adjust this based on your desired graph width\n            y2={index * gridSize}\n            stroke=\"gray\"\n            strokeWidth=\"0.25\"\n          />\n        ))} */}\n\n\n        {/* {props.data.map((vehicle, dataindex) => (\n          vehicle.map((point, index) => (\n            <Circle\n            key={index}\n            cx={(point.x * scale)}\n            cy={(point.y * scale)}\n            r={3}\n            fill={colors[dataindex]}\n          />\n          ))\n          \n        ))} */}\n      </Svg>\n  );\n}\n\n\nexport default function App() {\n\n  const [good, setalive] = useState(true);\n  const [coordsx, updateCoordsX] = useState(0)\n  const [coordsy, updateCoordsY] = useState(0)\n\n  const [graphWidth, changeGraphWidth] = useState(Dimensions.get(\"window\").height)\n  const [graphHeight, changeGraphHeight] = useState(Dimensions.get(\"window\").height)\n  // console.log(graphWidth)\n  var vehicleData = [];\n  // console.log(receivetopic)\n  function receive(msg) { \n    console.log(msg)\n    if (msg.destinationName === receivetopic) {\n    message = JSON.parse(msg.payloadString)\n    \n    if (message['status'] === \"bad\") {\n      Vibration.vibrate(vibration_pattern[Platform.OS], true)      \n      console.log(\"BAD\")\n      setalive(false)\n    }\n    else if (message['status'] === \"good\") {\n      Vibration.cancel()\n      console.log(\"GOOD\")\n      setalive(true)\n    }\n    else if (message['status'] === 'info') {\n      vehicleData.push([message['ped']['future']['x'], message['ped']['future']['y']])\n      vehicleData.push([message['veh']['future']['x'], message['veh']['future']['y']])\n    }\n  }}\n\n  useEffect(() => {\n    client = new Paho.Client(\n      \"broker.mqttdashboard.com\",\n      Number(8000),\n      `python-mqtt-${ped_id}`\n    );\n    client.connect( \n      {\n        onSuccess: () => { \n        console.log(\"Connected!\");\n        client.subscribe(receivetopic);\n        client.onMessageArrived = receive;\n      },\n      onFailure: () => {\n        console.log(\"Failed to connect!\"); \n      }\n      }\n    );\n    const interval = setInterval(() => {\n      // console.log(temp_coords_x + \",\" + temp_coords_y) //asdf\n      var curtime = Date.now()/1000\n      // console.log(curtime + \", \" + temp_coords_x)\n      send_coords(client, temp_coords_x, temp_coords_y, curtime)\n      // updateCoords({'x': coords.x+1, 'y': coords.y-0.4})\n      temp_coords_x += 0.43\n      temp_coords_y -= 0.04\n      temp_coords_x = Math.round(temp_coords_x*100)/100\n      temp_coords_y = Math.round(temp_coords_y*100)/100\n      updateCoordsX(temp_coords_x)\n      updateCoordsY(temp_coords_y)\n      // \n    }, coords_interval_ms);\n    return () => clearInterval(interval);\n  }, [])\n\n  function send_coords(c, coordsx, coordsy, time) {\n    const message = new Paho.Message((ped_id + \",\" + coordsx + \",\" + coordsy + ',' + time).toString());\n    message.destinationName = sendtopic;\n\n    c.send(message);\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={{flex: 4, alignItems: 'center', justifyContent: 'center',}}>\n        <Text style={{color: alive_chart[good]['color'], fontSize: 50}}>\n          {alive_chart[good]['text']}\n        </Text>\n      </View>\n      <View style={{flex: 5, alignItems: 'center', justifyContent: 'center', backgroundColor: 'blue'}} onLayout={(event) => {\n      var {x, y, width, height} = event.nativeEvent.layout;\n      console.log(x)\n      console.log(y)\n      changeGraphHeight(y)\n      changeGraphWidth(x)}}>\n        {/* <ScatterPlot \n          gridSize={10}\n          data={vehicleData}\n          width={graphWidth}\n          height={graphWidth}\n        /> */}\n        {/* <Text>Hi</Text> */}\n      </View>\n      <View style={{flex: 1, alignItems: 'center', justifyContent: 'center',}}>\n        <Text>\n          Your Coords: ({coordsx}, {coordsy})\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}