{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Paho from \"paho-mqtt\";\nimport { useState, useEffect } from \"react\";\nimport * as React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { Svg, Circle, Line } from 'react-native-svg';\nimport { Audio } from 'expo-av';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar client;\nvar ped_id = parseInt(Math.random() * 100);\nvar coords_interval_ms = 1000;\nvar receivetopic = \"ngi/1/detection/fromserver/\" + ped_id;\nvar sendtopic = \"ngi/1/detection/toserver\";\nvar temp_coords_x = 0;\nvar temp_coords_y = 0;\nvar futureData = [];\nvar realtimeData = [];\nvar vibration_pattern = {\n  'android': [0, 500, 250, 250, 250],\n  'ios': [0, 250]\n};\nvar alive_chart = {\n  0: {\n    text: \"So far so good\",\n    color: \"#47c906\"\n  },\n  1: {\n    text: \"DANGER DANGER COLLISION INCOMING\",\n    color: \"#c90606\"\n  },\n  2: {\n    text: \"Connecting to Server\",\n    color: \"#ffd012\"\n  },\n  3: {\n    text: \"No Network Connection\",\n    color: \"#033dfc\"\n  }\n};\nvar ScatterPlot = function ScatterPlot(props) {\n  var leftbound = 400;\n  var rightbound = 1700;\n  var upbound = 0;\n  var downbound = 1000;\n  var gridSizeW = 10;\n  var gridSizeH = 10;\n  var scale = (rightbound - leftbound) / props.width;\n  var height = parseInt((downbound - upbound) / scale);\n  var width = props.width;\n  var intervalsW = parseInt(width / gridSizeW);\n  var intervalsH = parseInt(height / gridSizeH);\n  return _jsx(ImageBackground, {\n    source: require(\"./assets/intersection_v1.png\"),\n    resizeMode: \"cover\",\n    style: styles.image,\n    imageStyle: {\n      opacity: 0.25\n    },\n    children: _jsxs(Svg, {\n      style: styles.graph,\n      children: [Array.from(Array(intervalsW + 1)).map(function (_, index) {\n        return _jsx(Line, {\n          x1: index * gridSizeW,\n          y1: 0,\n          x2: index * gridSizeW,\n          y2: height,\n          stroke: \"gray\",\n          strokeWidth: \"0.25\"\n        }, \"vertical-\" + index);\n      }), Array.from(Array(intervalsH + 1)).map(function (_, index) {\n        return _jsx(Line, {\n          x1: 0,\n          y1: index * gridSizeH,\n          x2: width,\n          y2: index * gridSizeH,\n          stroke: \"gray\",\n          strokeWidth: \"0.25\"\n        }, \"horizontal-\" + index);\n      }), props.futuredata.map(function (vehicle, dataindex) {\n        return vehicle.map(function (point, index) {\n          return _jsx(Circle, {\n            x: (point.x - leftbound) / scale,\n            cy: (point.y - upbound) / scale,\n            r: 1,\n            fill: point.color\n          }, index);\n        });\n      }), props.realtimedata.map(function (point, dataindex) {\n        return _jsx(Circle, {\n          cx: (point.x - leftbound) / scale,\n          cy: (point.y - upbound) / scale,\n          r: 3,\n          fill: point.color\n        }, dataindex);\n      })]\n    })\n  });\n};\nvar isPlaying = false;\nvar App = function App() {\n  var _useState = useState(2),\n    _useState2 = _slicedToArray(_useState, 2),\n    good = _useState2[0],\n    setalive = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    coordsx = _useState4[0],\n    updateCoordsX = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    coordsy = _useState6[0],\n    updateCoordsY = _useState6[1];\n  var _useState7 = useState(Dimensions.get(\"window\").height),\n    _useState8 = _slicedToArray(_useState7, 2),\n    graphWidth = _useState8[0],\n    changeGraphWidth = _useState8[1];\n  var _useState9 = useState(Dimensions.get(\"window\").height),\n    _useState10 = _slicedToArray(_useState9, 2),\n    graphHeight = _useState10[0],\n    changeGraphHeight = _useState10[1];\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    sound = _React$useState2[0],\n    setSound = _React$useState2[1];\n  function playSound() {\n    return _playSound.apply(this, arguments);\n  }\n  function _playSound() {\n    _playSound = _asyncToGenerator(function* () {\n      if (isPlaying == false) {\n        console.log('Loading Sound');\n        var _yield$Audio$Sound$cr = yield Audio.Sound.createAsync(require(\"./assets/alarm.mp3\")),\n          _sound = _yield$Audio$Sound$cr.sound;\n        setSound(_sound);\n        console.log('Playing Sound');\n        yield _sound.playAsync();\n        isPlaying = true;\n      }\n    });\n    return _playSound.apply(this, arguments);\n  }\n  function stopSound() {\n    return _stopSound.apply(this, arguments);\n  }\n  function _stopSound() {\n    _stopSound = _asyncToGenerator(function* () {\n      if (isPlaying) {\n        yield sound.unloadAsync();\n      }\n    });\n    return _stopSound.apply(this, arguments);\n  }\n  function receive(msg) {\n    if (msg.destinationName === receivetopic) {\n      var message = \"\";\n      try {\n        message = JSON.parse(msg.payloadString);\n      } catch (error) {\n        console.log(msg.payloadString);\n        console.error('Error parsing JSON:', error);\n      }\n      if (message['status'] === \"bad\") {\n        Vibration.vibrate(vibration_pattern[Platform.OS]);\n        setalive(1);\n        playSound();\n      } else if (message['status'] === \"good\") {\n        Vibration.cancel();\n        setalive(0);\n        stopSound();\n      } else if (message['status'] === 'info') {\n        futureData = [];\n        realtimeData = [];\n        message['future']['ped'].forEach(function (_, ind) {\n          futureData.push(message['future']['ped'][ind]);\n        });\n        message['future']['veh'].forEach(function (_, ind) {\n          futureData.push(message['future']['veh'][ind]);\n        });\n        message['realtime']['ped'].forEach(function (_, ind) {\n          realtimeData.push(message['realtime']['ped'][ind]);\n        });\n        message['realtime']['veh'].forEach(function (_, ind) {\n          realtimeData.push(message['realtime']['veh'][ind]);\n        });\n      }\n    }\n  }\n  useEffect(function () {\n    client = new Paho.Client(\"broker.mqttdashboard.com\", Number(8000), \"python-mqtt-\" + ped_id);\n    client.connect({\n      onSuccess: function onSuccess() {\n        console.log(\"Connected!\");\n        client.subscribe(receivetopic);\n        client.onMessageArrived = receive;\n      },\n      onFailure: function onFailure() {\n        console.log(\"Failed to connect!\");\n        setalive(3);\n      }\n    });\n    var interval = setInterval(function () {\n      var curtime = Date.now() / 1000;\n      send_coords(client, temp_coords_x, temp_coords_y, curtime);\n      temp_coords_x += 5.3;\n      temp_coords_y += 8.4;\n      temp_coords_x = Math.round(temp_coords_x * 100) / 100;\n      temp_coords_y = Math.round(temp_coords_y * 100) / 100;\n      updateCoordsX(temp_coords_x);\n      updateCoordsY(temp_coords_y);\n    }, coords_interval_ms);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  function send_coords(c, coordsx, coordsy, time) {\n    var message = new Paho.Message((ped_id + \",\" + coordsx + \",\" + coordsy + ',' + time).toString());\n    message.destinationName = sendtopic;\n    try {\n      c.send(message);\n    } catch (_unused) {\n      console.log(\"Failed to send message. Try refreshing?\");\n    }\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: {\n        height: '40%',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsx(Text, {\n        style: {\n          color: alive_chart[good]['color'],\n          fontSize: 50\n        },\n        children: alive_chart[good]['text']\n      })\n    }), _jsxs(View, {\n      style: {\n        height: '50%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#ffffaa'\n      },\n      onLayout: function onLayout(event) {\n        var _event$nativeEvent$la = event.nativeEvent.layout,\n          x = _event$nativeEvent$la.x,\n          y = _event$nativeEvent$la.y,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height;\n        changeGraphHeight(height);\n        changeGraphWidth(width);\n      },\n      children: [_jsx(ScatterPlot, {\n        gridSize: 10,\n        futuredata: futureData,\n        realtimedata: realtimeData,\n        width: graphWidth,\n        height: graphHeight\n      }), _jsx(Text, {\n        children: \"Real Time Graph of Trajectories\"\n      })]\n    }), _jsx(View, {\n      style: {\n        height: '10%',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsxs(Text, {\n        children: [\"Your Coords: (\", coordsx, \", \", coordsy, \")\"]\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  graph: {\n    flex: 1,\n    width: 300\n  },\n  image: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default App;","map":{"version":3,"names":["Paho","useState","useEffect","React","StyleSheet","Text","View","Vibration","Platform","Dimensions","ImageBackground","Svg","Circle","Line","Audio","jsx","_jsx","jsxs","_jsxs","client","ped_id","parseInt","Math","random","coords_interval_ms","receivetopic","sendtopic","temp_coords_x","temp_coords_y","futureData","realtimeData","vibration_pattern","alive_chart","text","color","ScatterPlot","props","leftbound","rightbound","upbound","downbound","gridSizeW","gridSizeH","scale","width","height","intervalsW","intervalsH","source","require","resizeMode","style","styles","image","imageStyle","opacity","children","graph","Array","from","map","_","index","x1","y1","x2","y2","stroke","strokeWidth","futuredata","vehicle","dataindex","point","x","cy","y","r","fill","realtimedata","cx","isPlaying","App","_useState","_useState2","_slicedToArray","good","setalive","_useState3","_useState4","coordsx","updateCoordsX","_useState5","_useState6","coordsy","updateCoordsY","_useState7","get","_useState8","graphWidth","changeGraphWidth","_useState9","_useState10","graphHeight","changeGraphHeight","_React$useState","_React$useState2","sound","setSound","playSound","_playSound","apply","arguments","_asyncToGenerator","console","log","_yield$Audio$Sound$cr","Sound","createAsync","playAsync","stopSound","_stopSound","unloadAsync","receive","msg","destinationName","message","JSON","parse","payloadString","error","vibrate","OS","cancel","forEach","ind","push","Client","Number","connect","onSuccess","subscribe","onMessageArrived","onFailure","interval","setInterval","curtime","Date","now","send_coords","round","clearInterval","c","time","Message","toString","send","_unused","container","alignItems","justifyContent","fontSize","backgroundColor","onLayout","event","_event$nativeEvent$la","nativeEvent","layout","gridSize","create","flex"],"sources":["/Users/markivanantha/Documents/Columbia Project/App/PedApp/App.js"],"sourcesContent":["// Vikram Anantha\n// Columbia Summer Internship 2023\n// Mentored under Prof Sharon Di, Yongjie Fu\n\n// This is Version 1 of the Pedestrian App\n\nimport Paho from \"paho-mqtt\";\n\nimport { useState, useEffect } from \"react\";\nimport * as React from \"react\";\nimport { StyleSheet, Text, View, Vibration, Platform, Dimensions, ImageBackground } from 'react-native';\nimport { Svg, Circle, Line } from 'react-native-svg';\nimport { Audio } from 'expo-av';\n\nvar client;\nvar ped_id = parseInt(Math.random() * 100);\n\nconst coords_interval_ms = 1000\nconst receivetopic = \"ngi/1/detection/fromserver/\" + ped_id\nconst sendtopic = \"ngi/1/detection/toserver\"\n\nvar temp_coords_x = 0\nvar temp_coords_y = 0\nvar futureData = []\nvar realtimeData = []\n\n\nconst vibration_pattern = {\n  'android': [\n    0, 500, 250, 250, 250 // wait 0s, vibrate .5s, wait .25s, vibrate .25s, wait .25s\n  ],\n  'ios': [\n    0, 250 // wait 0s, vibrate, wait .25s\n  ]\n}\nconst alive_chart = {\n  0: {\n    text: \"So far so good\",\n    color: \"#47c906\"\n  },\n  1: {\n    text: \"DANGER DANGER COLLISION INCOMING\",\n    color: \"#c90606\"\n  },\n  2: {\n    text: \"Connecting to Server\",\n    color: \"#ffd012\"\n  },\n  3: {\n    text: \"No Network Connection\",\n    color: \"#033dfc\"\n  },\n}\n\nconst ScatterPlot = props => {\n  const leftbound = 400\n  const rightbound = 1700\n  const upbound = 0\n  const downbound = 1000\n  const gridSizeW = 10;\n  const gridSizeH = 10;\n\n\n  const scale = (rightbound-leftbound) / props.width\n  const height = parseInt((downbound - upbound) / scale)\n  const width = props.width\n  // console.log(width, height, scale)\n  const intervalsW = parseInt(width / gridSizeW);\n  const intervalsH = parseInt(height / gridSizeH);\n\n\n  return (\n    <ImageBackground \n    source={require('./assets/intersection_v1.png')} \n    resizeMode=\"cover\" \n    style={styles.image}\n    imageStyle={{opacity:0.25}}>\n      <Svg style={styles.graph}>\n\n\n        {Array.from(Array(intervalsW+1)).map((_, index) => (\n          <Line\n            key={`vertical-${index}`}\n            x1={index * gridSizeW}\n            y1={0}\n            x2={index * gridSizeW}\n            y2={height} // Adjust this based on your desired graph height\n            stroke=\"gray\"\n            strokeWidth=\"0.25\"\n          />\n        ))}\n\n\n        {Array.from(Array(intervalsH+1)).map((_, index) => (\n          <Line\n            key={`horizontal-${index}`}\n            x1={0}\n            y1={index * gridSizeH}\n            x2={width} // Adjust this based on your desired graph width\n            y2={index * gridSizeH}\n            stroke=\"gray\"\n            strokeWidth=\"0.25\"\n          />\n        ))}\n\n\n        {props.futuredata.map((vehicle, dataindex) => (\n          vehicle.map((point, index) => (\n            <Circle\n            key={index}\n            x={(point.x - leftbound) / scale}\n          cy={(point.y - upbound) / scale}\n            r={1}\n            fill={point.color}\n          />\n          ))\n          \n        ))}\n\n        {props.realtimedata.map((point, dataindex) => (\n          <Circle\n          key={dataindex}\n          cx={(point.x - leftbound) / scale}\n          cy={(point.y - upbound) / scale}\n          r={3}\n          fill={point.color}\n        />\n        \n        ))}\n      </Svg>\n      </ImageBackground>\n  );\n}\n\nvar isPlaying = false;\n\nconst App = () => {\n\n  const [good, setalive] = useState(2);\n  const [coordsx, updateCoordsX] = useState(0)\n  const [coordsy, updateCoordsY] = useState(0)\n\n  const [graphWidth, changeGraphWidth] = useState(Dimensions.get(\"window\").height)\n  const [graphHeight, changeGraphHeight] = useState(Dimensions.get(\"window\").height)\n\n  const [sound, setSound] = React.useState();\n  // var sound = React.useRef(new Audio.Sound());\n  // const [isPlaying, setIsPlaying] = useState(false);\n\n  async function playSound() {\n    if (isPlaying == false) {\n      console.log('Loading Sound');\n      const {sound} = await Audio.Sound.createAsync( require('./assets/alarm.mp3') );\n      setSound(sound);\n      // sound = _sound\n\n      console.log('Playing Sound');\n      await sound.playAsync();\n      // setIsPlaying(true);\n      isPlaying = true\n    }\n  }\n  async function stopSound() {\n    // console.log(sound)\n    // console.log(isPlaying)\n    if (isPlaying) {\n      await sound.unloadAsync()\n    }\n    // isPlaying = false\n  }\n\n\n\n  function receive(msg) { \n    if (msg.destinationName === receivetopic) {\n    \n    // console.log(msg)\n    var message = \"\";\n    try {\n      // Parse the JSON string into a JavaScript object\n      message = JSON.parse(msg.payloadString);\n    } catch (error) {\n      console.log(msg.payloadString)\n      console.error('Error parsing JSON:', error);\n    }\n    // console.log(message)\n\n    if (message['status'] === \"bad\") {\n      Vibration.vibrate(vibration_pattern[Platform.OS])      \n      // console.log(\"BAD\")\n      setalive(1)\n      playSound()\n    }\n    else if (message['status'] === \"good\") {\n      Vibration.cancel()\n      // console.log(\"GOOD\")\n      setalive(0)\n      stopSound()\n    }\n    else if (message['status'] === 'info') {\n      futureData = []\n      realtimeData = []\n      message['future']['ped'].forEach((_, ind) => {\n        futureData.push(message['future']['ped'][ind])\n      })\n      message['future']['veh'].forEach((_, ind) => {\n        futureData.push(message['future']['veh'][ind])\n      })\n      message['realtime']['ped'].forEach((_, ind) => {\n        realtimeData.push(message['realtime']['ped'][ind])\n      })\n      message['realtime']['veh'].forEach((_, ind) => {\n        realtimeData.push(message['realtime']['veh'][ind])\n      })\n    }\n  }}\n\n  useEffect(() => {\n    client = new Paho.Client(\n      \"broker.mqttdashboard.com\",\n      Number(8000),\n      `python-mqtt-${ped_id}`\n    );\n    client.connect( \n      {\n        onSuccess: () => { \n        console.log(\"Connected!\");\n        client.subscribe(receivetopic);\n        client.onMessageArrived = receive;\n      },\n      onFailure: () => {\n        console.log(\"Failed to connect!\"); \n        setalive(3)\n      }\n      }\n    );\n    const interval = setInterval(() => {\n      // console.log(temp_coords_x + \",\" + temp_coords_y) //asdf\n      // console.log(\"1\");\n      var curtime = Date.now()/1000\n      // console.log(\"2\");\n      // console.log(curtime + \", \" + temp_coords_x)\n      send_coords(client, temp_coords_x, temp_coords_y, curtime)\n      // console.log(\"3\");\n      // updateCoords({'x': coords.x+1, 'y': coords.y-0.4})\n      temp_coords_x += 5.3\n      temp_coords_y += 8.4\n      temp_coords_x = Math.round(temp_coords_x*100)/100\n      temp_coords_y = Math.round(temp_coords_y*100)/100\n      updateCoordsX(temp_coords_x)\n      updateCoordsY(temp_coords_y)\n      // console.log(\"4\");\n      // \n    }, coords_interval_ms);\n    return () => clearInterval(interval);\n  }, [])\n\n  function send_coords(c, coordsx, coordsy, time) {\n    // console.log(\"a\")\n    const message = new Paho.Message((ped_id + \",\" + coordsx + \",\" + coordsy + ',' + time).toString());\n    // console.log(\"b\")\n    message.destinationName = sendtopic;\n    // console.log(\"c\")\n    try {\n      c.send(message);\n    } catch {\n      console.log(\"Failed to send message. Try refreshing?\")\n    }\n    // console.log(\"d\")\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={{height: '40%', alignItems: 'center', justifyContent: 'center',}}>\n        <Text style={{color: alive_chart[good]['color'], fontSize: 50}}>\n          {alive_chart[good]['text']}\n        </Text>\n      </View>\n      <View style={{height: '50%', alignItems: 'center', justifyContent: 'center', backgroundColor: '#ffffaa'}} onLayout={(event) => {\n      var {x, y, width, height} = event.nativeEvent.layout;\n      // console.log(x)\n      // console.log(y)\n      changeGraphHeight(height)\n      changeGraphWidth(width)}}>\n        <ScatterPlot \n          gridSize={10}\n          futuredata={futureData}\n          realtimedata={realtimeData}\n          width={graphWidth}\n          height={graphHeight}\n        />\n        <Text>Real Time Graph of Trajectories</Text>\n      </View>\n      <View style={{height: '10%', alignItems: 'center', justifyContent: 'center',}}>\n        <Text>\n          Your Coords: ({coordsx}, {coordsy})\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  graph: {\n    flex: 1,\n    width: 300,\n  },\n  image: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}